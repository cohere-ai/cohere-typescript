/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Cohere from "../../api";
import * as core from "../../core";
import { GenerateStreamText } from "./GenerateStreamText";
import { GenerateStreamEnd } from "./GenerateStreamEnd";
import { GenerateStreamError } from "./GenerateStreamError";

export const GenerateStreamedResponse: core.serialization.Schema<
    serializers.GenerateStreamedResponse.Raw,
    Cohere.GenerateStreamedResponse
> = core.serialization
    .union(core.serialization.discriminant("eventType", "event_type"), {
        "text-generation": GenerateStreamText,
        "stream-end": GenerateStreamEnd,
        "stream-error": GenerateStreamError,
    })
    .transform<Cohere.GenerateStreamedResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace GenerateStreamedResponse {
    type Raw =
        | GenerateStreamedResponse.TextGeneration
        | GenerateStreamedResponse.StreamEnd
        | GenerateStreamedResponse.StreamError;

    interface TextGeneration extends GenerateStreamText.Raw {
        event_type: "text-generation";
    }

    interface StreamEnd extends GenerateStreamEnd.Raw {
        event_type: "stream-end";
    }

    interface StreamError extends GenerateStreamError.Raw {
        event_type: "stream-error";
    }
}
