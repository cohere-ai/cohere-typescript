/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Cohere from "../../../../api/index";
import * as core from "../../../../core";
import { UserMessage } from "./UserMessage";
import { AssistantMessage } from "./AssistantMessage";
import { SystemMessage } from "./SystemMessage";
import { ToolMessage2 } from "./ToolMessage2";

export const ChatMessage2: core.serialization.Schema<serializers.ChatMessage2.Raw, Cohere.ChatMessage2> =
    core.serialization
        .union("role", {
            user: UserMessage,
            assistant: AssistantMessage,
            system: SystemMessage,
            tool: ToolMessage2,
        })
        .transform<Cohere.ChatMessage2>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace ChatMessage2 {
    type Raw = ChatMessage2.User | ChatMessage2.Assistant | ChatMessage2.System | ChatMessage2.Tool;

    interface User extends UserMessage.Raw {
        role: "user";
    }

    interface Assistant extends AssistantMessage.Raw {
        role: "assistant";
    }

    interface System extends SystemMessage.Raw {
        role: "system";
    }

    interface Tool extends ToolMessage2.Raw {
        role: "tool";
    }
}
