/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Cohere from "../../../../../api";
import * as core from "../../../../../core";

export const CreateEmbedJobRequest: core.serialization.Schema<
    serializers.CreateEmbedJobRequest.Raw,
    Cohere.CreateEmbedJobRequest
> = core.serialization.object({
    model: core.serialization.string(),
    datasetId: core.serialization.property("dataset_id", core.serialization.string()),
    inputType: core.serialization.property(
        "input_type",
        core.serialization.lazy(async () => (await import("../../../..")).EmbedInputType)
    ),
    name: core.serialization.string().optional(),
    embeddingTypes: core.serialization.property(
        "embedding_types",
        core.serialization
            .list(core.serialization.lazy(async () => (await import("../../../..")).EmbeddingType))
            .optional()
    ),
    truncate: core.serialization
        .lazy(async () => (await import("../../../..")).CreateEmbedJobRequestTruncate)
        .optional(),
});

export declare namespace CreateEmbedJobRequest {
    interface Raw {
        model: string;
        dataset_id: string;
        input_type: serializers.EmbedInputType.Raw;
        name?: string | null;
        embedding_types?: serializers.EmbeddingType.Raw[] | null;
        truncate?: serializers.CreateEmbedJobRequestTruncate.Raw | null;
    }
}
