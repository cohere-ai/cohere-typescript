/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Cohere from "../../../../../api";
import * as core from "../../../../../core";
import { CreateConnectorOAuth } from "../../../../types/CreateConnectorOAuth";
import { CreateConnectorServiceAuth } from "../../../../types/CreateConnectorServiceAuth";

export const CreateConnectorRequest: core.serialization.Schema<
    serializers.CreateConnectorRequest.Raw,
    Cohere.CreateConnectorRequest
> = core.serialization.object({
    name: core.serialization.string(),
    description: core.serialization.string().optional(),
    url: core.serialization.string(),
    excludes: core.serialization.list(core.serialization.string()).optional(),
    oauth: CreateConnectorOAuth.optional(),
    active: core.serialization.boolean().optional(),
    continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional()),
    serviceAuth: core.serialization.property("service_auth", CreateConnectorServiceAuth.optional()),
});

export declare namespace CreateConnectorRequest {
    interface Raw {
        name: string;
        description?: string | null;
        url: string;
        excludes?: string[] | null;
        oauth?: CreateConnectorOAuth.Raw | null;
        active?: boolean | null;
        continue_on_failure?: boolean | null;
        service_auth?: CreateConnectorServiceAuth.Raw | null;
    }
}
