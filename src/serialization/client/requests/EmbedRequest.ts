/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../index";
import * as Cohere from "../../../api/index";
import * as core from "../../../core";
import { EmbedInputType } from "../../types/EmbedInputType";
import { EmbeddingType } from "../../types/EmbeddingType";
import { EmbedRequestTruncate } from "../../types/EmbedRequestTruncate";

export const EmbedRequest: core.serialization.Schema<serializers.EmbedRequest.Raw, Cohere.EmbedRequest> =
    core.serialization.object({
        texts: core.serialization.list(core.serialization.string()),
        model: core.serialization.string().optional(),
        inputType: core.serialization.property("input_type", EmbedInputType.optional()),
        embeddingTypes: core.serialization.property(
            "embedding_types",
            core.serialization.list(EmbeddingType).optional()
        ),
        truncate: EmbedRequestTruncate.optional(),
    });

export declare namespace EmbedRequest {
    interface Raw {
        texts: string[];
        model?: string | null;
        input_type?: EmbedInputType.Raw | null;
        embedding_types?: EmbeddingType.Raw[] | null;
        truncate?: EmbedRequestTruncate.Raw | null;
    }
}
