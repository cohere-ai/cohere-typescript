/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cohere from "../../../index.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";

export declare namespace Datasets {
    export interface Options {
        environment?: core.Supplier<environments.CohereEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Client-Name header */
        clientName?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Client-Name header */
        clientName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Datasets {
    constructor(protected readonly _options: Datasets.Options = {}) {}

    /**
     * List datasets that have been created.
     *
     * @param {Cohere.DatasetsListRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.datasets.list()
     */
    public list(
        request: Cohere.DatasetsListRequest = {},
        requestOptions?: Datasets.RequestOptions,
    ): core.HttpResponsePromise<Cohere.DatasetsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Cohere.DatasetsListRequest = {},
        requestOptions?: Datasets.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.DatasetsListResponse>> {
        const { datasetType, before, after, limit, offset, validationStatus } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (datasetType != null) {
            _queryParams["datasetType"] = datasetType;
        }

        if (before != null) {
            _queryParams["before"] = before;
        }

        if (after != null) {
            _queryParams["after"] = after;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (validationStatus != null) {
            _queryParams["validationStatus"] = validationStatus;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/datasets",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.0",
                "User-Agent": "cohere-ai/7.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.DatasetsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/datasets.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a dataset by uploading a file. See ['Dataset Creation'](https://docs.cohere.com/docs/datasets#dataset-creation) for more information.
     *
     * @param {Cohere.DatasetsCreateRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.datasets.create({
     *         data: fs.createReadStream("/path/to/your/file"),
     *         name: "name",
     *         type: "embed-input"
     *     })
     */
    public create(
        request: Cohere.DatasetsCreateRequest,
        requestOptions?: Datasets.RequestOptions,
    ): core.HttpResponsePromise<Cohere.DatasetsCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Cohere.DatasetsCreateRequest,
        requestOptions?: Datasets.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.DatasetsCreateResponse>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["name"] = request.name;
        _queryParams["type"] = request.type;
        if (request.keep_original_file != null) {
            _queryParams["keep_original_file"] = request.keep_original_file.toString();
        }

        if (request.skip_malformed_input != null) {
            _queryParams["skip_malformed_input"] = request.skip_malformed_input.toString();
        }

        if (request.keep_fields != null) {
            if (Array.isArray(request.keep_fields)) {
                _queryParams["keep_fields"] = request.keep_fields.map((item) => item);
            } else {
                _queryParams["keep_fields"] = request.keep_fields;
            }
        }

        if (request.optional_fields != null) {
            if (Array.isArray(request.optional_fields)) {
                _queryParams["optional_fields"] = request.optional_fields.map((item) => item);
            } else {
                _queryParams["optional_fields"] = request.optional_fields;
            }
        }

        if (request.text_separator != null) {
            _queryParams["text_separator"] = request.text_separator;
        }

        if (request.csv_delimiter != null) {
            _queryParams["csv_delimiter"] = request.csv_delimiter;
        }

        const _request = await core.newFormData();
        await _request.appendFile("data", request.data);
        if (request.eval_data != null) {
            await _request.appendFile("eval_data", request.eval_data);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/datasets",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.0",
                "User-Agent": "cohere-ai/7.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.DatasetsCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling POST /v1/datasets.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.
     *
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.datasets.getUsage()
     */
    public getUsage(
        requestOptions?: Datasets.RequestOptions,
    ): core.HttpResponsePromise<Cohere.DatasetsGetUsageResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUsage(requestOptions));
    }

    private async __getUsage(
        requestOptions?: Datasets.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.DatasetsGetUsageResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/datasets/usage",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.0",
                "User-Agent": "cohere-ai/7.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.DatasetsGetUsageResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/datasets/usage.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a dataset by ID. See ['Datasets'](https://docs.cohere.com/docs/datasets) for more information.
     *
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.datasets.get("id")
     */
    public get(
        id: string,
        requestOptions?: Datasets.RequestOptions,
    ): core.HttpResponsePromise<Cohere.DatasetsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Datasets.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.DatasetsGetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/datasets/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.0",
                "User-Agent": "cohere-ai/7.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.DatasetsGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/datasets/{id}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.
     *
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.datasets.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Datasets.RequestOptions,
    ): core.HttpResponsePromise<Record<string, unknown>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Datasets.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, unknown>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/datasets/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.0",
                "User-Agent": "cohere-ai/7.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Record<string, unknown>, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling DELETE /v1/datasets/{id}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CO_API_KEY"];
        if (bearer == null) {
            throw new errors.CohereError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a CO_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
