/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cohere from "../../../index.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Connectors {
    export interface Options {
        environment?: core.Supplier<environments.CohereEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Client-Name header */
        clientName?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Client-Name header */
        clientName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Connectors {
    constructor(protected readonly _options: Connectors.Options = {}) {}

    /**
     * Returns a list of connectors ordered by descending creation date (newer first). See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
     *
     * @param {Cohere.ConnectorsListRequest} request
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.list()
     */
    public list(
        request: Cohere.ConnectorsListRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.ListConnectorsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Cohere.ConnectorsListRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.ListConnectorsResponse>> {
        const { limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/connectors",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.ListConnectorsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/connectors.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new connector. The connector is tested during registration and will cancel registration when the test is unsuccessful. See ['Creating and Deploying a Connector'](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector) for more information.
     *
     * @param {Cohere.CreateConnectorRequest} request
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.create({
     *         name: "name",
     *         url: "url"
     *     })
     */
    public create(
        request: Cohere.CreateConnectorRequest,
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.CreateConnectorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Cohere.CreateConnectorRequest,
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.CreateConnectorResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/connectors",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.CreateConnectorResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling POST /v1/connectors.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
     *
     * @param {string} id - The ID of the connector to retrieve.
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.get("id")
     */
    public get(
        id: string,
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.GetConnectorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.GetConnectorResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/connectors/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.GetConnectorResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/connectors/{id}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
     *
     * @param {string} id - The ID of the connector to delete.
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.DeleteConnectorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.DeleteConnectorResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/connectors/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.DeleteConnectorResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling DELETE /v1/connectors/{id}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a connector by ID. Omitted fields will not be updated. See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
     *
     * @param {string} id - The ID of the connector to update.
     * @param {Cohere.UpdateConnectorRequest} request
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.update("id")
     */
    public update(
        id: string,
        request: Cohere.UpdateConnectorRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.UpdateConnectorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Cohere.UpdateConnectorRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.UpdateConnectorResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/connectors/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.UpdateConnectorResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling PATCH /v1/connectors/{id}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Authorize the connector with the given ID for the connector oauth app.  See ['Connector Authentication'](https://docs.cohere.com/docs/connector-authentication) for more information.
     *
     * @param {string} id - The ID of the connector to authorize.
     * @param {Cohere.ConnectorsOAuthAuthorizeRequest} request
     * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.connectors.oAuthAuthorize("id")
     */
    public oAuthAuthorize(
        id: string,
        request: Cohere.ConnectorsOAuthAuthorizeRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): core.HttpResponsePromise<Cohere.OAuthAuthorizeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__oAuthAuthorize(id, request, requestOptions));
    }

    private async __oAuthAuthorize(
        id: string,
        request: Cohere.ConnectorsOAuthAuthorizeRequest = {},
        requestOptions?: Connectors.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.OAuthAuthorizeResponse>> {
        const { after_token_redirect: afterTokenRedirect } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (afterTokenRedirect != null) {
            _queryParams["after_token_redirect"] = afterTokenRedirect;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/connectors/${encodeURIComponent(id)}/oauth/authorize`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.17.2",
                "User-Agent": "cohere-ai/7.17.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Cohere.OAuthAuthorizeResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body as unknown, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling POST /v1/connectors/{id}/oauth/authorize.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CO_API_KEY"];
        if (bearer == null) {
            throw new errors.CohereError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a CO_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
