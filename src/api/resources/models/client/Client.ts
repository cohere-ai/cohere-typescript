/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cohere from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Models {
    export interface Options {
        environment?: core.Supplier<environments.CohereEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Client-Name header */
        clientName?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Client-Name header */
        clientName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Models {
    constructor(protected readonly _options: Models.Options = {}) {}

    /**
     * Returns the details of a model, provided its name.
     *
     * @param {string} model
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.models.get("command-a-03-2025")
     */
    public get(
        model: string,
        requestOptions?: Models.RequestOptions,
    ): core.HttpResponsePromise<Cohere.GetModelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(model, requestOptions));
    }

    private async __get(
        model: string,
        requestOptions?: Models.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.GetModelResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/models/${encodeURIComponent(model)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.19.0",
                "User-Agent": "cohere-ai/7.19.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetModelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/models/{model}.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of models available for use. The list contains models from Cohere as well as your fine-tuned models.
     *
     * @param {Cohere.ModelsListRequest} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.UnprocessableEntityError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InvalidTokenError}
     * @throws {@link Cohere.ClientClosedRequestError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.NotImplementedError}
     * @throws {@link Cohere.ServiceUnavailableError}
     * @throws {@link Cohere.GatewayTimeoutError}
     *
     * @example
     *     await client.models.list()
     */
    public list(
        request: Cohere.ModelsListRequest = {},
        requestOptions?: Models.RequestOptions,
    ): core.HttpResponsePromise<Cohere.ListModelsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Cohere.ModelsListRequest = {},
        requestOptions?: Models.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.ListModelsResponse>> {
        const { pageSize, pageToken, endpoint, defaultOnly } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (endpoint != null) {
            _queryParams["endpoint"] = serializers.CompatibleEndpoint.jsonOrThrow(endpoint, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (defaultOnly != null) {
            _queryParams["default_only"] = defaultOnly.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/models",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.19.0",
                "User-Agent": "cohere-ai/7.19.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListModelsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 422:
                    throw new Cohere.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new Cohere.TooManyRequestsError(_response.error.body, _response.rawResponse);
                case 498:
                    throw new Cohere.InvalidTokenError(_response.error.body, _response.rawResponse);
                case 499:
                    throw new Cohere.ClientClosedRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 501:
                    throw new Cohere.NotImplementedError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                case 504:
                    throw new Cohere.GatewayTimeoutError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError("Timeout exceeded when calling GET /v1/models.");
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CO_API_KEY"];
        if (bearer == null) {
            throw new errors.CohereError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a CO_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
