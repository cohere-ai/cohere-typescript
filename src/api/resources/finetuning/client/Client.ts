/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cohere from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Finetuning {
    export interface Options {
        environment?: core.Supplier<environments.CohereEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Client-Name header */
        clientName?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Client-Name header */
        clientName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Finetuning API (Beta)
 */
export class Finetuning {
    constructor(protected readonly _options: Finetuning.Options = {}) {}

    /**
     * Returns a list of fine-tuned models that the user has access to.
     *
     * @param {Cohere.FinetuningListFinetunedModelsRequest} request
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.listFinetunedModels()
     */
    public listFinetunedModels(
        request: Cohere.FinetuningListFinetunedModelsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.ListFinetunedModelsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listFinetunedModels(request, requestOptions));
    }

    private async __listFinetunedModels(
        request: Cohere.FinetuningListFinetunedModelsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.ListFinetunedModelsResponse>> {
        const { pageSize, pageToken, orderBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/finetuning/finetuned-models",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.ListFinetunedModelsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling GET /v1/finetuning/finetuned-models.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new fine-tuned model. The model will be trained on the dataset specified in the request body. The training process may take some time, and the model will be available once the training is complete.
     *
     * @param {Cohere.finetuning.FinetunedModel} request
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.createFinetunedModel({
     *         name: "api-test",
     *         settings: {
     *             baseModel: {
     *                 baseType: "BASE_TYPE_CHAT"
     *             },
     *             datasetId: "my-dataset-id"
     *         }
     *     })
     */
    public createFinetunedModel(
        request: Cohere.finetuning.FinetunedModel,
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.CreateFinetunedModelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createFinetunedModel(request, requestOptions));
    }

    private async __createFinetunedModel(
        request: Cohere.finetuning.FinetunedModel,
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.CreateFinetunedModelResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                "v1/finetuning/finetuned-models",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.finetuning.FinetunedModel.jsonOrThrow(request, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.CreateFinetunedModelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling POST /v1/finetuning/finetuned-models.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a fine-tuned model by its ID.
     *
     * @param {string} id - The fine-tuned model ID.
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.getFinetunedModel("id")
     */
    public getFinetunedModel(
        id: string,
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.GetFinetunedModelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getFinetunedModel(id, requestOptions));
    }

    private async __getFinetunedModel(
        id: string,
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.GetFinetunedModelResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/finetuning/finetuned-models/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.GetFinetunedModelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling GET /v1/finetuning/finetuned-models/{id}.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a fine-tuned model. The model will be removed from the system and will no longer be available for use.
     * This operation is irreversible.
     *
     * @param {string} id - The fine-tuned model ID.
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.deleteFinetunedModel("id")
     */
    public deleteFinetunedModel(
        id: string,
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.DeleteFinetunedModelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteFinetunedModel(id, requestOptions));
    }

    private async __deleteFinetunedModel(
        id: string,
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.DeleteFinetunedModelResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/finetuning/finetuned-models/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.DeleteFinetunedModelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/finetuning/finetuned-models/{id}.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the fine-tuned model with the given ID. The model will be updated with the new settings and name provided in the request body.
     *
     * @param {string} id - FinetunedModel ID.
     * @param {Cohere.FinetuningUpdateFinetunedModelRequest} request
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.updateFinetunedModel("id", {
     *         name: "name",
     *         settings: {
     *             baseModel: {
     *                 baseType: "BASE_TYPE_UNSPECIFIED"
     *             },
     *             datasetId: "dataset_id"
     *         }
     *     })
     */
    public updateFinetunedModel(
        id: string,
        request: Cohere.FinetuningUpdateFinetunedModelRequest,
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.UpdateFinetunedModelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateFinetunedModel(id, request, requestOptions));
    }

    private async __updateFinetunedModel(
        id: string,
        request: Cohere.FinetuningUpdateFinetunedModelRequest,
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.UpdateFinetunedModelResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/finetuning/finetuned-models/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.FinetuningUpdateFinetunedModelRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.UpdateFinetunedModelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/finetuning/finetuned-models/{id}.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of events that occurred during the life-cycle of the fine-tuned model.
     * The events are ordered by creation time, with the most recent event first.
     * The list can be paginated using `page_size` and `page_token` parameters.
     *
     * @param {string} finetunedModelId - The parent fine-tuned model ID.
     * @param {Cohere.FinetuningListEventsRequest} request
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.listEvents("finetuned_model_id")
     */
    public listEvents(
        finetunedModelId: string,
        request: Cohere.FinetuningListEventsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.ListEventsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listEvents(finetunedModelId, request, requestOptions));
    }

    private async __listEvents(
        finetunedModelId: string,
        request: Cohere.FinetuningListEventsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.ListEventsResponse>> {
        const { pageSize, pageToken, orderBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/finetuning/finetuned-models/${encodeURIComponent(finetunedModelId)}/events`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.ListEventsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling GET /v1/finetuning/finetuned-models/{finetuned_model_id}/events.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of metrics measured during the training of a fine-tuned model.
     * The metrics are ordered by step number, with the most recent step first.
     * The list can be paginated using `page_size` and `page_token` parameters.
     *
     * @param {string} finetunedModelId - The parent fine-tuned model ID.
     * @param {Cohere.FinetuningListTrainingStepMetricsRequest} request
     * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.UnauthorizedError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.InternalServerError}
     * @throws {@link Cohere.ServiceUnavailableError}
     *
     * @example
     *     await client.finetuning.listTrainingStepMetrics("finetuned_model_id")
     */
    public listTrainingStepMetrics(
        finetunedModelId: string,
        request: Cohere.FinetuningListTrainingStepMetricsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): core.HttpResponsePromise<Cohere.finetuning.ListTrainingStepMetricsResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__listTrainingStepMetrics(finetunedModelId, request, requestOptions),
        );
    }

    private async __listTrainingStepMetrics(
        finetunedModelId: string,
        request: Cohere.FinetuningListTrainingStepMetricsRequest = {},
        requestOptions?: Finetuning.RequestOptions,
    ): Promise<core.WithRawResponse<Cohere.finetuning.ListTrainingStepMetricsResponse>> {
        const { pageSize, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CohereEnvironment.Production,
                `v1/finetuning/finetuned-models/${encodeURIComponent(finetunedModelId)}/training-step-metrics`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Client-Name":
                    (await core.Supplier.get(this._options.clientName)) != null
                        ? await core.Supplier.get(this._options.clientName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "cohere-ai",
                "X-Fern-SDK-Version": "7.18.1",
                "User-Agent": "cohere-ai/7.18.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.finetuning.ListTrainingStepMetricsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Cohere.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Cohere.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Cohere.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Cohere.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Cohere.InternalServerError(_response.error.body, _response.rawResponse);
                case 503:
                    throw new Cohere.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CohereError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CohereError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CohereTimeoutError(
                    "Timeout exceeded when calling GET /v1/finetuning/finetuned-models/{finetuned_model_id}/training-step-metrics.",
                );
            case "unknown":
                throw new errors.CohereError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CO_API_KEY"];
        if (bearer == null) {
            throw new errors.CohereError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a CO_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
