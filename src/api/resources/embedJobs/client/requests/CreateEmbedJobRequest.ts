/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Cohere from "../../../..";

/**
 * @example
 *     {
 *         model: "string",
 *         datasetId: "string",
 *         inputType: Cohere.EmbedInputType.SearchDocument,
 *         truncate: Cohere.CreateEmbedJobRequestTruncate.Start
 *     }
 */
export interface CreateEmbedJobRequest {
    /**
     * ID of the embedding model.
     *
     * Available models and corresponding embedding dimensions:
     *
     * - `embed-english-v3.0` : 1024
     * - `embed-multilingual-v3.0` : 1024
     * - `embed-english-light-v3.0` : 384
     * - `embed-multilingual-light-v3.0` : 384
     *
     */
    model: string;
    /** ID of a [Dataset](https://docs.cohere.com/docs/datasets). The Dataset must be of type `embed-input` and must have a validation status `Validated` */
    datasetId: string;
    inputType: Cohere.EmbedInputType;
    /** The name of the embed job. */
    name?: string;
    /**
     * One of `START|END` to specify how the API will handle inputs longer than the maximum token length.
     *
     * Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.
     *
     */
    truncate?: Cohere.CreateEmbedJobRequestTruncate;
}
